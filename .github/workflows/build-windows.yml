name: Build Windows Server 2019

on:
  push:
  pull_request:
    branches:
      - master

jobs:
  build-windows:
    runs-on: windows-2019
    
    env:
     SONAR_SCANNER_VERSION: 4.7.0.2747
     SONAR_SERVER_URL: "https://sonarcloud.io"
     BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: 'win64_msvc2015_64'

    # Downgrading nuget is required as of 2021-04-23, as nuget 5.9.1.111 fails installing protobuf
    # https://github.com/actions/virtual-environments/issues/3240
    - name: Downgrade nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.8.x'

    - name: Install Dependencies
      # choco install of version 1.9.3 produced a checksum error
      run: choco install doxygen.install --version=1.9.2

    - name: Uninstall Chocolatey
      run: move "$env:PROGRAMDATA\chocolatey" "$env:PROGRAMDATA\_chocolatey"

#    - name: Install Capâ€™n Proto
#      run: |
#        mkdir "${{ runner.workspace }}/capnp"
#        cd "${{ runner.workspace }}/capnp"
#        git clone https://github.com/sandstorm-io/capnproto.git
#        cd capnproto
#        git checkout release-0.9.0
#        cd c++
#        mkdir _build
#        cd _build
#        cmake .. -G "Visual Studio 16 2019" -A x64
#        cmake --build . --parallel --config Release
#        cmake --build . --target install --config Release

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules:  'true'
        fetch-depth: 0

    - name: Download NPCAP
      run: |
        cd %GITHUB_WORKSPACE%
        powershell -Command "& 'build_win\download_npcap.ps1'"
      shell: cmd

    - name: Create Python virtualenv
      run: |
        mkdir "${{ runner.workspace }}\_build\complete\.venv\"

        # At the moment (2021-10-27) there is no official Python 3.10 lxml package available on pypi. Thus we use python 3.9.
        py -3.9 -m venv "${{ runner.workspace }}\.venv"
        CALL "${{ runner.workspace }}\.venv\Scripts\activate.bat"

        echo Upgrading pip
        python -m pip install --upgrade pip

        pip install wheel

        echo Installing python requirements
        pip install -r "%GITHUB_WORKSPACE%\requirements.txt"

      shell: cmd

    - name: CMake SDK
      run: |
        mkdir "${{ runner.workspace }}\_build\sdk\"
        cd "${{ runner.workspace }}/_build/sdk"

        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 ^
        -DHAS_HDF5=ON ^
        -DHAS_QT5=ON ^
        -DHAS_CURL=OFF ^
        -DHAS_CAPNPROTO=OFF ^
        -DHAS_FTXUI=ON ^
        -DBUILD_DOCS=OFF ^
        -DBUILD_APPS=OFF ^
        -DBUILD_SAMPLES=OFF ^
        -DBUILD_TIME=ON ^
        -DBUILD_PY_BINDING=OFF ^
        -DBUILD_CSHARP_BINDING=OFF ^
        -DBUILD_ECAL_TESTS=OFF ^
        -DECAL_LAYER_ICEORYX=OFF ^
        -DECAL_INCLUDE_PY_SAMPLES=OFF ^
        -DECAL_INSTALL_SAMPLE_SOURCES=OFF ^
        -DECAL_JOIN_MULTICAST_TWICE=OFF ^
        -DECAL_NPCAP_SUPPORT=ON ^
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON ^
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=ON ^
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON ^
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON ^
        -DECAL_THIRDPARTY_BUILD_FINEFTP=OFF ^
        -DECAL_THIRDPARTY_BUILD_CURL=OFF ^
        -DECAL_THIRDPARTY_BUILD_GTEST=OFF ^
        -DECAL_THIRDPARTY_BUILD_HDF5=ON ^
        -DECAL_THIRDPARTY_BUILD_RECYCLE=ON ^
        -DECAL_THIRDPARTY_BUILD_TCP_PUBSUB=ON ^
        -DECAL_THIRDPARTY_BUILD_QWT=OFF ^
        -DECAL_THIRDPARTY_BUILD_YAML-CPP=OFF ^
        -DBUILD_SHARED_LIBS=OFF ^
        -DCMAKE_PREFIX_PATH="%ProgramFiles%/Cap'n Proto/lib/cmake/CapnProto" ^
        -DCMAKE_BUILD_TYPE=Debug ^
        -DCPACK_PACK_WITH_INNOSETUP=OFF
      shell: cmd

    - name: CMake Complete
      run: |
        CALL "${{ runner.workspace }}\.venv\Scripts\activate.bat"
        cd "${{ runner.workspace }}/_build/complete"
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 ^
        -DHAS_HDF5=ON ^
        -DHAS_QT5=ON ^
        -DHAS_CURL=ON ^
        -DHAS_CAPNPROTO=OFF ^
        -DHAS_FTXUI=ON ^
        -DBUILD_DOCS=ON ^
        -DBUILD_APPS=ON ^
        -DBUILD_SAMPLES=ON ^
        -DBUILD_TIME=ON ^
        -DBUILD_PY_BINDING=ON ^
        -DBUILD_CSHARP_BINDING=ON ^
        -DBUILD_ECAL_TESTS=ON ^
        -DECAL_LAYER_ICEORYX=OFF ^
        -DECAL_INCLUDE_PY_SAMPLES=OFF ^
        -DECAL_INSTALL_SAMPLE_SOURCES=ON ^
        -DECAL_JOIN_MULTICAST_TWICE=OFF ^
        -DECAL_NPCAP_SUPPORT=ON ^
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON ^
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=ON ^
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON ^
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON ^
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON ^
        -DECAL_THIRDPARTY_BUILD_CURL=ON ^
        -DECAL_THIRDPARTY_BUILD_GTEST=ON ^
        -DECAL_THIRDPARTY_BUILD_HDF5=ON ^
        -DECAL_THIRDPARTY_BUILD_RECYCLE=ON ^
        -DECAL_THIRDPARTY_BUILD_TCP_PUBSUB=ON ^
        -DECAL_THIRDPARTY_BUILD_QWT=ON ^
        -DECAL_THIRDPARTY_BUILD_YAML-CPP=ON ^
        -DBUILD_SHARED_LIBS=OFF ^
        -DCMAKE_PREFIX_PATH="%ProgramFiles%/Cap'n Proto/lib/cmake/CapnProto" ^
        -DCMAKE_BUILD_TYPE=Release ^
        -DCPACK_PACK_WITH_INNOSETUP=ON
        mkdir "%ALLUSERSPROFILE%\eCAL"
        copy "%GITHUB_WORKSPACE%\ecal\core\cfg\ecal.ini" "%ALLUSERSPROFILE%\eCAL"
      shell: cmd

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-windows.zip
      run: |
        New-Item -Force -ItemType directory -Path $HOME\.sonar
        curl -sSLo $HOME\.sonar\sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
        unzip -o $HOME\.sonar\sonar-scanner.zip -d $HOME\.sonar\
        echo "$HOME\.sonar\sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-windows\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-win-x86.zip
      run: |
        curl -sSLo $HOME\.sonar\build-wrapper.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME\.sonar\build-wrapper.zip -d $HOME\.sonar\
        echo "$HOME\.sonar\build-wrapper-win-x86" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
        
    - name: Build SDK
      run: cmake --build . --config Debug
      working-directory: ${{ runner.workspace }}/_build/sdk

    - name: Build Release
      run: |
        cd ${{ runner.workspace }}/_build/complete
        build-wrapper-win-x86-64 --out-dir ../../ecal-test/${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build . --config Release
        
      #working-directory: ${{ runner.workspace }}/_build/complete

    # Create Python.
    # The strang-looking double-cmake is an ugly workaround to force CMake to
    # re-find Python, after we have changed the venv from the outside. The
    # alternative would be to clean everything, which would cause an unnecessary
    # rebuild of eCAL and HDF5 for each python Version.
    - name: Build Python 3.10 Wheel
      run: |
        mkdir ".venv_310"
        py -3.10 -m venv ".venv_310"
        CALL ".venv_310\Scripts\activate.bat"
        pip install wheel
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=FIRST
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: cmd
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Build Python 3.9 Wheel
      run: |
        mkdir ".venv_39"
        py -3.9 -m venv ".venv_39"
        CALL ".venv_39\Scripts\activate.bat"
        pip install wheel
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=FIRST
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: cmd
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Build Python 3.8 Wheel
      run: |
        mkdir ".venv_38"
        py -3.8 -m venv ".venv_38"
        CALL ".venv_38\Scripts\activate.bat"
        pip install wheel
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=FIRST
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: cmd
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Build Python 3.7 Wheel
      run: |
        mkdir ".venv_37"
        py -3.7 -m venv ".venv_37"
        CALL ".venv_37\Scripts\activate.bat"
        pip install wheel
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=FIRST
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: cmd
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Build Python 3.6 Wheel
      run: |
        mkdir ".venv_36"
        py -3.6 -m venv ".venv_36"
        CALL ".venv_36\Scripts\activate.bat"
        pip install wheel
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=FIRST
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: cmd
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Build Python 3.5 Wheel
      run: |
        mkdir ".venv_35"
        py -3.5 -m venv ".venv_35"
        CALL ".venv_35\Scripts\activate.bat"
        pip install wheel
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=FIRST
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: cmd
      working-directory: ${{ runner.workspace }}/_build/complete

#    - name: Build Documentation C
#      run: cmake --build . --target documentation_c
#      working-directory: ${{ runner.workspace }}/_build
#
#    - name: Build Documentation C++
#      run: cmake --build . --target documentation_cpp
#      working-directory: ${{ runner.workspace }}/_build

    - name: Run Tests
      run: ctest -C Release -V
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Pack SDK
      run: cpack -C Debug
      working-directory: ${{ runner.workspace }}/_build/sdk

    - name: Pack complete setup
      run: cpack -C Release
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Detect certificate
      id: cert
      run: |
        if [[ -n "${{ secrets.CERT_BODY }}" \
              && -n "${{ secrets.CERT_PSWD }}" \
              && -n "${{ secrets.CERT_ALGO }}" \
              && -n "${{ secrets.CERT_HASH }}" ]]
        then
          echo "ATTENTION: a certificate is available"
          echo "::set-output name=is_available::true"
        else
          echo "WARNING: A certificate is not available"
          echo "::set-output name=is_available::false"
        fi
      shell: bash
      
    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

    # https://github.com/OrhanKupusoglu/code-sign-action
    - name: Sign the installer
      if: fromJSON(steps.cert.outputs.is_available)
      uses: OrhanKupusoglu/code-sign-action@v5.5.1
      with:
        cert_body: ${{ secrets.CERT_BODY }}
        cert_pswd: ${{ secrets.CERT_PSWD }}
        cert_algo: ${{ secrets.CERT_ALGO }}
        cert_hash: ${{ secrets.CERT_HASH }}
        folder: ${{ runner.workspace }}/_build/complete/_deploy
        debug: true

    - name: Upload Windows setup
      uses: actions/upload-artifact@v2
      with:
        name: windows-setup
        path: ${{ runner.workspace }}/_build/complete/_deploy/*.exe

    - name: Upload Python Wheels
      uses: actions/upload-artifact@v2
      with:
        name: windows-python-wheels
        path: ${{ runner.workspace }}/_build/complete/_deploy/*.whl
